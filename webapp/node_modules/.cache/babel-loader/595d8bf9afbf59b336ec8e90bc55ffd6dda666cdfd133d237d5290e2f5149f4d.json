{"ast":null,"code":"var _jsxFileName = \"/Users/daniellundquist/Documents/Bachelor-gruppe-3/webapp/src/frontend/components/ShipmentEvalChart.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport apiServiceInstance from \"../APIService\";\nimport { Chart, registerables } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(...registerables);\nfunction ShipmentEvalChart() {\n  _s();\n  const [evalList, setEvalList] = useState([]);\n  useEffect(() => {\n    // Fetch data from API endpoint\n    apiServiceInstance.getShipmentEval().then(response => {\n      console.log(response.data);\n      setEvalList(response.data.filter(line => line.includes(\"shipment\")).map(line => {\n        const [time, shipment, operation] = line.split(', ');\n        return {\n          time,\n          shipment,\n          operation\n        };\n      }));\n    });\n  }, []);\n  function formatData(evalList) {\n    const data = {\n      labels: evalList.map(evaluation => evaluation.shipment),\n      datasets: [{\n        label: 'Create',\n        data: evalList.map(evaluation => evaluation.time),\n        fill: false,\n        borderColor: 'rgb(75, 192, 192)',\n        lineTension: 0.1\n      }]\n    };\n    return data;\n  }\n  useEffect(() => {\n    if (evalList.length > 0) {\n      const data = formatData(evalList);\n      const ctx = document.getElementById('shipment-eval-chart').getContext('2d');\n      new Chart(ctx, {\n        type: 'line',\n        data: data,\n        options: {\n          responsive: true,\n          scales: {\n            y: {\n              beginAtZero: true\n            }\n          }\n        }\n      });\n      const barData = formatBarData(evalList);\n      const barCtx = document.getElementById('shipment-eval-bar-chart').getContext('2d');\n      new Chart(barCtx, {\n        type: 'bar',\n        data: barData,\n        options: {\n          responsive: true,\n          scales: {\n            y: {\n              beginAtZero: true\n            }\n          }\n        }\n      });\n    }\n  }, [evalList]);\n  function formatBarData(evalList) {\n    const timeValues = evalList.filter(evaluation => parseInt(evaluation.time) !== 0 && !isNaN(parseInt(evaluation.time))).map(evaluation => {\n      const value = parseFloat(evaluation.time);\n      return value;\n    });\n    const data = {\n      labels: ['Minimum', 'Maximum', 'Average', 'Standard Deviation'],\n      datasets: [{\n        label: 'Time',\n        data: [Math.min(...timeValues), Math.max(...timeValues), calculateAverage(timeValues), calculateStandardDeviation(timeValues)],\n        backgroundColor: ['rgba(75, 192, 192, 0.2)'],\n        borderColor: ['rgba(75, 192, 192, 1)'],\n        borderWidth: 1\n      }]\n    };\n    return data;\n  }\n  function calculateAverage(values) {\n    const sum = values.reduce((acc, val) => acc + val, 0);\n    console.log(values);\n    return sum / values.length;\n  }\n  function calculateStandardDeviation(values) {\n    const avg = calculateAverage(values);\n    const squareDiffs = values.map(val => Math.pow(val - avg, 2));\n    const avgSquareDiff = calculateAverage(squareDiffs);\n    const stdDev = Math.sqrt(avgSquareDiff);\n    return stdDev;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"shipment-eval-chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"shipment-eval-bar-chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 9\n  }, this);\n}\n_s(ShipmentEvalChart, \"zC4eqcLmydhJEWHqkbmtnuaIL5s=\");\n_c = ShipmentEvalChart;\nexport default ShipmentEvalChart;\nvar _c;\n$RefreshReg$(_c, \"ShipmentEvalChart\");","map":{"version":3,"names":["React","useState","useEffect","apiServiceInstance","Chart","registerables","jsxDEV","_jsxDEV","register","ShipmentEvalChart","_s","evalList","setEvalList","getShipmentEval","then","response","console","log","data","filter","line","includes","map","time","shipment","operation","split","formatData","labels","evaluation","datasets","label","fill","borderColor","lineTension","length","ctx","document","getElementById","getContext","type","options","responsive","scales","y","beginAtZero","barData","formatBarData","barCtx","timeValues","parseInt","isNaN","value","parseFloat","Math","min","max","calculateAverage","calculateStandardDeviation","backgroundColor","borderWidth","values","sum","reduce","acc","val","avg","squareDiffs","pow","avgSquareDiff","stdDev","sqrt","children","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/daniellundquist/Documents/Bachelor-gruppe-3/webapp/src/frontend/components/ShipmentEvalChart.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport apiServiceInstance from \"../APIService\";\nimport { Chart, registerables } from 'chart.js';\n\nChart.register(...registerables);\n\nfunction ShipmentEvalChart() {\n    const [evalList, setEvalList] = useState([]);\n\n    useEffect(() => {\n        // Fetch data from API endpoint\n        apiServiceInstance.getShipmentEval().then((response) => {\n            console.log(response.data)\n            setEvalList(\n                response.data\n                    .filter((line) => line.includes(\"shipment\"))\n                    .map((line) => {\n                    const [time, shipment, operation] = line.split(', ');\n                    return { time, shipment, operation };\n                })\n            );\n        });\n    }, []);\n\n    function formatData(evalList) {\n        const data = {\n            labels: evalList.map((evaluation) => evaluation.shipment),\n            datasets: [\n                {\n                    label: 'Create',\n                    data: evalList.map((evaluation) => evaluation.time),\n                    fill: false,\n                    borderColor: 'rgb(75, 192, 192)',\n                    lineTension: 0.1,\n                },\n            ],\n        };\n        return data;\n    }\n\n    useEffect(() => {\n        if (evalList.length > 0) {\n            const data = formatData(evalList);\n            const ctx = document.getElementById('shipment-eval-chart').getContext('2d');\n            new Chart(ctx, {\n                type: 'line',\n                data: data,\n                options: {\n                    responsive: true,\n                    scales: {\n                        y: {\n                            beginAtZero: true,\n                        },\n                    },\n                },\n            });\n\n            const barData = formatBarData(evalList);\n            const barCtx = document.getElementById('shipment-eval-bar-chart').getContext('2d');\n            new Chart(barCtx, {\n                type: 'bar',\n                data: barData,\n                options: {\n                    responsive: true,\n                    scales: {\n                        y: {\n                            beginAtZero: true,\n                        },\n                    },\n                },\n            });\n        }\n    }, [evalList]);\n\n    function formatBarData(evalList) {\n        const timeValues = evalList\n            .filter((evaluation) => parseInt(evaluation.time) !== 0 && !isNaN(parseInt(evaluation.time)) )\n            .map((evaluation) => {\n            const value = parseFloat(evaluation.time);\n            return value;\n        });\n        const data = {\n            labels: ['Minimum', 'Maximum', 'Average', 'Standard Deviation'],\n            datasets: [\n                {\n                    label: 'Time',\n                    data: [\n                        Math.min(...timeValues),\n                        Math.max(...timeValues),\n                        calculateAverage(timeValues),\n                        calculateStandardDeviation(timeValues),\n                    ],\n                    backgroundColor: ['rgba(75, 192, 192, 0.2)'],\n                    borderColor: ['rgba(75, 192, 192, 1)'],\n                    borderWidth: 1,\n                },\n            ],\n        };\n        return data;\n    }\n\n    function calculateAverage(values) {\n        const sum = values.reduce((acc, val) => acc + val, 0);\n        console.log(values);\n        return sum / values.length;\n    }\n\n    function calculateStandardDeviation(values) {\n        const avg = calculateAverage(values);\n        const squareDiffs = values.map((val) => Math.pow(val - avg, 2));\n        const avgSquareDiff = calculateAverage(squareDiffs);\n        const stdDev = Math.sqrt(avgSquareDiff);\n        return stdDev;\n    }\n\n    return (\n        <div>\n            <canvas id=\"shipment-eval-chart\"></canvas>\n            <canvas id=\"shipment-eval-bar-chart\"></canvas>\n        </div>\n    );\n}\n\nexport default ShipmentEvalChart;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}